pipeline {
    agent any
    environment {
        NEXUS_URL = '192.168.50.65:8081'
        NEXUS_CREDS_ID = 'nx-uploader'
        NEXUS_CREDS_USR = 'nx-uploader'
        NEXUS_CREDS_PSW = 'nx-uploader'
        STAGING_SERVER = '192.168.50.55'
        PRODUCTION_SERVER = '192.168.50.60'
        USERNAME = 'vagrant'
        PASSWORD = 'vagrant'
        GOLANG = 'go_lang'
    }

    tools {
        go GOLANG
    }

    stages {
        stage('Clone Repository') {
            steps {
                git 'https://github.com/wickett/word-cloud-generator.git'
            }
        }
        stage('Build code') {
            steps {
                sh '''sed -i "s/1.DEVELOPMENT/1.$BUILD_NUMBER/g" static/version
                      GOOS=linux GOARCH=amd64 go build -o ./artifacts/word-cloud-generator -v
                      gzip -f ./artifacts/word-cloud-generator
                   '''
            }
        }
        stage('Nexus build'){
            steps{
                nexusArtifactUploader(
                    nexusVersion: 'nexus3',
                    protocol: 'http',
                    nexusUrl: NEXUS_URL,
                    groupId: 'pipeline',
                    version: '1.$BUILD_NUMBER',
                    repository: 'word-cloud-build',
                    credentialsId: NEXUS_CREDS_ID,
                    artifacts: [
                        [artifactId: 'word-cloud',
                         classifier: '',
                         file: './artifacts/word-cloud-generator.gz',
                         type: 'gz']
                    ]
                )
            }
        }
        stage('Add to staging'){
            steps{
                sh """  sshpass -p ${PASSWORD} ssh -o StrictHostKeyChecking=no vagrant@$STAGING_SERVER 'sudo service wordcloud stop'
                        sshpass -p ${PASSWORD} ssh vagrant@$STAGING_SERVER 'curl -X GET $NEXUS_URL/repository/word-cloud-build/pipeline/word-cloud/1.$BUILD_NUMBER/word-cloud-1.${BUILD_NUMBER}.gz -o /opt/wordcloud/word-cloud-generator.gz -u $NEXUS_CREDS_USR:$NEXUS_CREDS_PSW'
                        sshpass -p ${PASSWORD} ssh vagrant@$STAGING_SERVER 'gunzip -f /opt/wordcloud/word-cloud-generator.gz && chmod +x /opt/wordcloud/word-cloud-generator && sudo service wordcloud start' """
            }
        }

        stage('Test building'){
            steps{
                sh """  res=`curl -s http://$STAGING_SERVER:8888/version | jq -r '.version'`
                        if [ "1.$BUILD_NUMBER" != "$res" ]; then
                            exit 99
                        fi

                        res=`curl -s -H "Content-Type: application/json" -d '{"text":"ths is a really really really important thing this is"}' http://$STAGING_SERVER:8888/api | jq '. | length'`
                        if [ "7" != "$res" ]; then
                          exit 99
                        fi
                """
            }

        }
        stage('Add to production'){
            steps{
                sh """  sshpass -p ${PASSWORD} ssh -o StrictHostKeyChecking=no vagrant@$PRODUCTION_SERVER 'sudo service wordcloud stop'
                        sshpass -p ${PASSWORD} ssh vagrant@$PRODUCTION_SERVER 'curl -X GET $NEXUS_URL/repository/word-cloud-build/pipeline/word-cloud/1.$BUILD_NUMBER/word-cloud-1.${BUILD_NUMBER}.gz -o /opt/wordcloud/word-cloud-generator.gz -u $NEXUS_CREDS_USR:$NEXUS_CREDS_PSW'
                        sshpass -p ${PASSWORD} ssh vagrant@$PRODUCTION_SERVER 'gunzip -f /opt/wordcloud/word-cloud-generator.gz && chmod +x /opt/wordcloud/word-cloud-generator && sudo service wordcloud start' """
            }
        }
    }
}
