pipeline {
    agent any
    environment {
        NEXUS_URL = '192.168.50.65:8081/'
        NEXUS_CREDS_ID = 'nx-uploader'
        NEXUS_CREDS_USR = 'nx-uploader'
        NEXUS_CREDS_PSW = 'nx-uploader'
        STAGING_SERVER = '192.168.50.55'
        PRODUCTION_SERVER = '192.168.50.60:8888'
        USERNAME = 'vagrant'
        PASSWORD = 'vagrant'
        GOLANG = 'go_lang'
    }

    tools {
        go GOLANG
    }

    stages {
        stage('Clone Repository') {
            steps {
                git 'https://github.com/wickett/word-cloud-generator.git'
            }
        }
        stage('Build code') {
            steps {
                sh '''sed -i "s/1.DEVELOPMENT/1.$BUILD_NUMBER/g" static/version
                      GOOS=linux GOARCH=amd64 go build -o ./artifacts/word-cloud-generator -v
                      gzip -f ./artifacts/word-cloud-generator
                   '''
            }
        }
        stage('Nexus build'){
            steps{
                nexusArtifactUploader(
                    nexusVersion: 'nexus3',
                    protocol: 'http',
                    nexusUrl: NEXUS_URL,
                    groupId: 'pipline',
                    version: '1.$BUILD_NUMBER',
                    repository: 'word-cloud-build',
                    credentialsId: NEXUS_CREDS_ID,
                    artifacts: [
                        [artifactId: 'word-cloud',
                         classifier: '',
                         file: './artifacts/word-cloud-generator.gz',
                         type: 'gz']
                    ]
                )
            }
        }
        stage('Remote SSH'){
            steps{

                withCredentials([usernameColonPassword(credentialsId: 'vagrant_staging', variable: 'PASSWORD')]) {
                    sh """ssh vagrant@$STAGING_SERVER \\
                    'sudo service wordcloud stop && \\
                    curl -X GET $NEXUS_URL/repository/word-cloud-build/pipeline/word-cloud/1.$BUILD_NUMBER/word-cloud-1.${BUILD_NUMBER}.gz \\
                    -o /opt/wordcloud/word-cloud-generator.gz -u $NEXUS_CREDS_USR:$NEXUS_CREDS_PSW && \\
                    gunzip -f /opt/wordcloud/word-cloud-generator.gz && \\
                    chmod +x /opt/wordcloud/word-cloud-generator && \\
                    sudo service wordcloud start' """
                }
            }
        }

    }
}












        stage('Code Review and Tests') {
            steps {
                script {
                    sh 'make lint'
                    sh 'make test'
                }
            }
        }


        stage('Deploy to Staging') {
            steps {
                script {
                    // Your staging deployment logic here
                    // Use STAGING_SERVER, USERNAME, and PASSWORD variables
                    // Start integration tests in parallel
                    parallel (
                        "Thread1": {
                            // Integration test logic for thread 1
                        },
                        "Thread2": {
                            // Integration test logic for thread 2
                        }
                    )
                }
            }
        }

        stage('Deploy to Production') {
            when {
                expression {
                    currentBuild.resultIsBetterOrEqualTo('SUCCESS')
                }
            }
        }
    }

    post {
        always {
            // Cleanup or post-build steps
        }
    }
}
